# -*- mode: org ; mode: visual-line; coding: utf-8 -*- -*

* What is ErZauker?

Er Zauker is an erlang-based search engine for programming languages. 
Er Zauker is based from ideas taken by old Google Code Search and uses Redis as storage engine.
For more information please look at http://gioorgi.com/tag/code-zauker/

* How to build and use
Just launch
#+BEGIN_SRC sh
  make 
#+END_SRC

Then to index the erzauker own erlang code
#+BEGIN_SRC shell
 make test-indexer
#+END_SRC
then press enter and try
#+BEGIN_SRC erlang
er_zauker_app:erlist("trigram").
#+END_SRC
from the erlang command line.
You will got a list of file which *could* contain the keyword.
If no errors araise, you are ready to do a real search

** How to do a search
In the bin directory you will find czgrep. 
Use czgrep to search on the code you just indexed:
#+BEGIN_SRC shell
 czgrep @doc
#+END_SRC
to find all the line containg the "doc" string.

Rember: /The minimal string size is 3 char (a trigram)/

By the way czgrep use =er_zauker_app:erlist= function to ask redis the file which could contain all the trigrams of the search word.
On a very huge set of files czgrep will easily outperform 'grep -r',


* Redis configuration (IMPORTANT)
Ensure redis.conf has

#+BEGIN_SRC conf
maxmemory-policy noeviction
#+END_SRC

(the default is volatile-lru) because otherwise you will end up losing your data :)


* About the web interface (COROS)
Coros (a nitrogen webapp) spots 
1) a simple search engine
1) a github based "download and index" functionality
   This function is able to download and index a provided git repository, dowloading only a bunch of revision



To use coros, type:
#+BEGIN_SRC sh
  make all
  cd web-interface/coros
  make dev
#+END_SRC
Now open a browser to http://localhost:8000 and enjoy a moder, ajax-powered er_zauker web interface.
Results are hilighted in bold.
At the moment the search is done using a slow grep, so be patient.
In the future it will be done via an ajax mechanics.

At the moment Coros is tested only under Unix and under Erlang R17.

* New features!
** v0.1.0
 + Migration to Erlang R 24
** v0.0.7
 + Added nitrogen web interface (codename: COROS)
   It is not embedded, it is a standalone app depending con code-zauker
** v0.0.6
   Missed some files. /Do not use/
** v0.0.5
 + added a test to detect bad trigrams (no 3-chars stuff).
 + not only utf-8: iso-8859 files are supported (experimental).
 + czgrep spots a color output
 + to avoid issues con standrd ulimit, redis connection pool has been set below 1024.
 + =make benchmark= now generate an eprof-report.log file to track time spent on the er_zauker_util module.
 
** v0.0.4
 + redis pool (rpool) have been reimplemented as a gen_server. The implementation now is much more fast.
 
** v0.0.3 
1. a fast md5 checksum to avoid reindexing already indexed data.
2. The ability to exit when all files are indexed (see =er_zauker_app:wait_worker_done()=)
3. the ability to ask the server how much worker are active, statistics and so on
4. Upon common process crash, the redis resource will be freed
5. Easy performance meters (see =er_zauker_app:wait_worker_done()= output).

* Known limitations
It is not yet possible to index iso-8859 files (it will crash the file reader part). 
It is not good to mix encoding inside redis, so the general idea is to get somewhat utf-8 conversion.

* How to develop: suggested installation
** How to monitor redis
Use =redis-cli monitor= to monitor actons and use
redis-cli client list | wc -l
to get a crude list of connected client

** On Linux (Debian jessie)
Erlang R17 is needed. We strongly suggest Hipe (native compiler) on a 64bit installation
Install Erlang Hipe and dev libs (use "aptitude versions" to get the complete list).
On Debian the R17 is available only under 'testing' branch (i.e. 1:17.1-dfsg-3)

The minimum required sets depends on your distribution. On Debian try:

With aptitude
#+BEGIN_SRC shell
i   erlang-base-hipe                - Erlang/OTP HiPE enabled virtual machine an
i   erlang-debugger                 - Erlang/OTP application for debugging and t
i   erlang-dev                      - Erlang/OTP development libraries and heade
i   erlang-eunit                    - Erlang/OTP module for unit testing        
i   erlang-snmp                     - Erlang/OTP SNMP applications              
i   erlang-ssh                      - Erlang/OTP implementation of SSH protocol 
i   erlang-syntax-tools             - Erlang/OTP modules for handling abstract E
i   erlang-test-server              - Erlang/OTP server for automated applicatio
i   erlang-xmerl                    - Erlang/OTP XML tools                      
#+END_SRC

Complete list (via =dpkg --get-selections | grep erlang=):

| Package name         | Suggested version              |
| erlang-asn1          | 1:17.1-dfsg-3                  |
| erlang-base-hipe     |                                |
| erlang-crypto        |                                |
| erlang-debugger      |                                |
| erlang-dev           |                                |
| erlang-et            |                                |
| erlang-eunit         | Only for developing            |
| erlang-gs            |                                |
| erlang-inets         |                                |
| erlang-mnesia        |                                |
| erlang-observer      |                                |
| erlang-public-key    |                                |
| erlang-runtime-tools |                                |
| erlang-snmp          |                                |
| erlang-ssh           |                                |
| erlang-ssl           |                                |
| erlang-syntax-tools  |                                |
| erlang-test-server   |                                |
| erlang-tools         |                                |
| erlang-webtool       |                                |
| erlang-wx            |                                |
| erlang-xmerl         |                                |
| erlang-syntax-tools  |                                |
| erlang-pman          | Anyway observer is the new guy |
| erlang-edoc          | Only needed for developing     |

** Unit testing
Use =make eunit=

** How to refresh after adding new deps:
After adding deps, use 
rebar get-deps compile



* About Erlang 24 migration
- Replaced use of erlang:now/0 see
 https://erlang.org/doc/apps/erts/time_correction.html#Dos_and_Donts